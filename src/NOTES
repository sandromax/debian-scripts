#!/bin/bash

# Шлях до каталогу з аудіо
AUDIO_DIR="/home/user12/audiostream"

# Створення та запуск плейліста
cvlc --loop --no-audio-title-show --intf dummy $(find "$AUDIO_DIR" -type f -name "*.mp3" -printf '%p ')

#chmod +x /home/user12/play_audio_playlist.sh
#/home/user12/play_audio_playlist.sh

#nano /home/user12/play_playlist.sh
#!/bin/bash

# Шлях до каталогу з відео
VIDEO_DIR="/home/user12/videostream"

# Створення та запуск плейліста
vlc --fullscreen --loop --no-video-title-show $(find "$VIDEO_DIR" -type f -name "*.mp4" -printf '%p ')
#chmod +x /home/user12/play_playlist.sh
#/home/user12/play_playlist.sh

#sudo apt-get update
#sudo apt-get install wmctrl
## або
#sudo apt-get install xdotool

#nano make_vlc_active.sh
#!/bin/bash

while true; do
  # Знаходження ID вікна VLC
  VLC_WINDOW_ID=$(wmctrl -l | grep VLC | awk '{print $1}')

  # Якщо вікно знайдено, зробити його активним
  if [ ! -z "$VLC_WINDOW_ID" ]; then
    wmctrl -i -a "$VLC_WINDOW_ID"
  fi

  # Чекати 60 секунд перед наступною ітерацією
  sleep 60
done

#for xdotool
#!/bin/bash

while true; do
  # Знаходження ID вікна VLC та активація його
  VLC_WINDOW_ID=$(xdotool search --name VLC)

  # Якщо вікно знайдено, зробити його активним
  if [ ! -z "$VLC_WINDOW_ID" ]; then
    xdotool windowactivate "$VLC_WINDOW_ID"
  fi

  # Чекати 60 секунд перед наступною ітерацією
  sleep 60
done
#chmod +x make_vlc_active.sh
#./make_vlc_active.sh

#AudioStreeam folder link
https://www.dropbox.com/scl/fo/hsubj48qdx5p3p13x5tm4/h?rlkey=0rqp2xz1k30t4w8ebnjjolr25 &
dl=0

#VideoStream folder link
https://www.dropbox.com/scl/fo/vilpo3k78swrrhymsdky5/h?rlkey=reineuvd9yygjt8pn61q8gjx2 &
dl=0

#Pharma folder link
https://www.dropbox.com/scl/fo/2d9qjg9hd6vo2ndjl7zyr/h?rlkey=hy0z98t3wn5cetvs443m30v5k &
dl=0

nano /home/admin30/scripts/startup_script.sh
#!/bin/bash

# Шлях до лог-файлу
LOG_DIR="/home/admin30/Dropbox/Pharma/Logs"
LOG_FILE="$LOG_DIR/$(date +%F).log"

# Функція для додавання запису у лог-файл
log() {
  echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >>"$LOG_FILE"
}

# Створення каталогу для лог-файлів, якщо він не існує
mkdir -p "$LOG_DIR"

# Запис про старт системи
log "System start."

# Запуск Dropbox
dropbox start
log "Dropbox started."

# Запуск скриптів
/home/admin30/scripts/launch_video.sh &
log "Video playback script started."

/home/admin30/scripts/brightness_control.sh &
log "Brightness control script started."

/home/admin30/scripts/launch_audio.sh &
log "Audio playback script started."

/home/admin30/scripts/make_vlc_active.sh &
log "VLC activation script started."

/home/admin30/scripts/update_media.sh &
log "Media update script started."

chmod +x /home/admin30/scripts/startup_script.sh

crontab -e
@reboot /home/admin30/scripts/startup_script.sh

nano /home/user/scripts/check_and_update_video.sh

#!/bin/bash

VIDEO_DIR="/home/user/Dropbox/VideoStream"
LAST_CHECK_FILE="/home/user/scripts/.last_video_check"

# Функція для отримання часу останнього модифікування каталогу
get_last_mod_time() {
  stat -c "%Y" "$VIDEO_DIR"
}

# Зчитування часу останнього перевіреного оновлення
last_mod_time=$(get_last_mod_time)
if [ -f "$LAST_CHECK_FILE" ]; then
  last_check_time=$(<"$LAST_CHECK_FILE")
else
  last_check_time=0
fi

# Порівняння часу останнього модифікування та часу останньої перевірки
if [ "$last_mod_time" -ne "$last_check_time" ]; then
  # Якщо файли були оновлені, зупинити поточний скрипт відтворення
  pkill -f launch_video.sh

  # Запуск скрипта відтворення з новими файлами
  /home/user/scripts/launch_video.sh &

  # Збереження нового часу останнього модифікування
  echo "$last_mod_time" >"$LAST_CHECK_FILE"
fi

chmod +x /home/user/scripts/check_and_update_video.sh
crontab -e
*/5 * * * * /home/user/scripts/check_and_update_video.sh

log_video_playback.sh
#!/bin/bash

# Шлях до каталогу з відеофайлами
VIDEO_DIR="/home/admin30/Dropbox/Pharma/VideoStream"

# Шлях до лог-файлу
LOG_FILE="/home/admin30/logs/video_playback.log"

# Отримання поточної дати та часу
current_date=$(date '+%Y-%m-%d %H:%M:%S')

# Запис у лог-файл про початок відтворення
echo "Playback started at $current_date" >>"$LOG_FILE"

# Запис у лог-файл списку mp4 файлів
echo "List of mp4 files in $VIDEO_DIR:" >>"$LOG_FILE"
find "$VIDEO_DIR" -type f -name "*.mp4" >>"$LOG_FILE"

# Закінчення скрипта
echo "Logging completed at $(date '+%Y-%m-%d %H:%M:%S')" >>"$LOG_FILE"

chmod +x /home/admin30/scripts/log_video_playback.sh
/home/admin30/scripts/log_video_playback.sh

launch_audio.sh
sudo apt-get install mpg123
#!/bin/bash

AUDIO_DIR="/home/admin30/Dropbox/Pharma/AudioStream"

# Безкінечний цикл для відтворення
while true; do
  # Знаходимо всі mp3 файли та передаємо їх у mpg123
  find "$AUDIO_DIR" -type f -name "*.mp3" -exec mpg123 '{}' +
done

#ПЕРЕВІРКА ВИКОРИСТАНН CPU VLC
#!/bin/bash

VIDEO_DIR="/home/admin30/Dropbox/Pharma/VideoStream"

# Функція для запуску VLC
start_vlc() {
  vlc --fullscreen --loop --no-video-title-show $(find "$VIDEO_DIR" -type f -name "*.mp4" -printf '%p ') &
}

# Функція для перевірки використання CPU VLC
check_vlc_cpu_usage() {
  VLC_PID=$(pgrep -x "vlc")
  if [ -z "$VLC_PID" ]; then
    echo "VLC is not running. Starting VLC."
    start_vlc
  else
    CPU_USAGE=$(ps -p "$VLC_PID" -o %cpu | tail -n 1 | xargs)
    if [[ $CPU_USAGE == "0.0" ]]; then
      echo "VLC CPU usage is 0. Restarting VLC."
      pkill -x "vlc"
      sleep 5
      start_vlc
    else
      echo "VLC is running normally."
    fi
  fi
}

# Основний цикл скрипта
while true; do
  check_vlc_cpu_usage
  sleep 60
done

#!/bin/bash

VIDEO_DIR="/home/admin30/Dropbox/Pharma/VideoStream"

# Функція для запуску VLC
start_vlc() {
  vlc --fullscreen --loop --no-video-title-show $(find "$VIDEO_DIR" -type f -name "*.mp4" -printf '%p ') &
}

# Функція для перевірки використання CPU VLC
check_vlc_cpu_usage() {
  VLC_PID=$(pgrep -x "vlc")
  if [ -z "$VLC_PID" ]; then
    echo "VLC is not running. Starting VLC."
    start_vlc
  else
    CPU_USAGE=$(ps -p "$VLC_PID" -o %cpu | tail -n 1 | xargs)
    if [[ $CPU_USAGE == "0.0" ]]; then
      echo "VLC CPU usage is 0. Restarting VLC."
      pkill -x "vlc"
      sleep 5
      start_vlc
    else
      echo "VLC is running normally."
    fi
  fi
}

# Основний цикл скрипта
while true; do
  check_vlc_cpu_usage
  sleep 60
done

sudo apt-get install feh

#!/bin/bash

# Шлях до вашого зображення
IMAGE_PATH="/path/to/your/image.jpg"

# Відкриття зображення на повний екран за допомогою feh
feh -F "$IMAGE_PATH"

#!/bin/bash

# Шлях до вашого каталогу з відео
VIDEO_DIR="/path/to/your/video/directory"

# Отримання першого відеофайлу в каталозі
VIDEO_FILE=$(find "$VIDEO_DIR" -type f -name "*.mp4" | head -n 1)

# Перевірка, чи файл існує
if [[ -f "$VIDEO_FILE" ]]; then
  # Відтворення відео в VLC в режимі повного екрану
  vlc --fullscreen "$VIDEO_FILE"
else
  echo "Відеофайл не знайдено."
fi

#Надайте скрипту права на виконання:
#bash
#Copy code
#chmod +x play_videos.sh
#Для автоматичного запуску цього скрипта після входу в систему,
#вам потрібно додати його в автозапуск вашого дистрибутива Linux.
#Це зазвичай робиться через налаштування диспетчера сеансів
#або додаючи скрипт до каталогу .config/autostart
#у вашому домашньому каталозі.
#
#Для відлагодження та тестування Bash скриптів можна використовувати різні підходи та інструменти.
#Ось кілька способів та тестів, які ви можете написати,
#щоб переконатися у правильній роботі ваших скриптів:
#---------------------------------
#1. Використання set -x для відслідковування виконання скрипта
#Додайте set -x на початку кожного скрипта, щоб бачити,
#які команди виконуються та з якими параметрами.

#!/bin/bash

VIDEO_DIR="/home/user12/videostream"

# Створення плейлісту з усіх mp4 файлів у каталозі
find "$VIDEO_DIR" -type f -name "*.mp4" -print0 | while IFS= read -r -d '' file; do
  vlc --fullscreen --no-video-title-show --loop --play-and-exit "$file"
done

#!/bin/bash

# Шлях до каталогу з відео
VIDEO_DIR="/home/user12/videostream"

# Створення та запуск плейліста
vlc --fullscreen --loop --no-video-title-show $(find "$VIDEO_DIR" -type f -name "*.mp4" -printf '%p ')

#-----------------------------------
#2. Знаходження та Зупинка Процесу
#Якщо скрипт запущений у фоні або в іншому терміналі, вам потрібно спершу знайти його PID (ідентифікатор процесу), а потім зупинити його.
#
#Знаходження PID:
#Використайте ps або pgrep для знаходження PID скрипта. Наприклад:
#
#bash
#Copy code
#ps aux | grep [n]ame_of_script.sh
#або
#
#bash
#Copy code
#pgrep -f name_of_script.sh
#Зупинка Процесу:
#Використайте kill або killall для зупинки процесу. Наприклад:
#
#bash
#Copy code
#kill [PID]
#де [PID] - це ідентифікатор процесу, який ви знайшли. Якщо скрипт не реагує, використайте kill -9 [PID] для примусової зупинки.
#
#3. Зупинка Всіх Екземплярів Скрипта
#Якщо вам потрібно зупинити всі запущені екземпляри скрипта, ви можете використати killall:
#
#bash
#Copy code
#killall name_of_script.sh
#Це зупинить усі процеси, які мають ім'я name_of_script.sh.
#---------------------------------------------------------------

#!/bin/bash

VIDEO_DIR="/home/admin30/Dropbox/Pharma/VideoStream"

# Функція для запуску VLC
run_vlc() {
  # Запускаємо VLC у повноекранному режимі без інтерфейсу та зберігаємо PID
  vlc --fullscreen --no-video-title-show --quiet "${VIDEO_DIR}"/* &
  VLC_PID=$!

  # Зберігаємо PID у змінну
  echo $VLC_PID >/tmp/vlc_pid.txt

  # Чекаємо завершення процесу VLC
  wait $VLC_PID
}

# Головний цикл
while true; do
  # Запускаємо VLC
  run_vlc

  # Якщо VLC завершив роботу, зупиняємо попередній процес
  if [[ -f /tmp/vlc_pid.txt ]]; then
    kill $(cat /tmp/vlc_pid.txt)
    rm /tmp/vlc_pid.txt
  fi
done

#!/bin/bash

# Шлях до каталогу з відеофайлами
VIDEO_DIR="/home/admin30/Dropbox/Pharma/VideoStream"

while true; do
  # Перебираємо всі mp4 файли у каталозі
  for video_file in "${VIDEO_DIR}"/*.mp4; do
    # Перевіряємо, чи файл існує
    if [[ -f "$video_file" ]]; then
      # Запускаємо VLC для відтворення файлу
      cvlc --fullscreen --no-video-title-show --quiet "$video_file"
    fi
  done
done

#------------------------------------16.01 00:39
#Для модифікації скрипта таким чином,
#щоб він враховував загальний час програвання плейліста
#і запускав наступний процес програвання після цього часу,
#ми можемо використовувати mediainfo для отримання тривалості кожного відеофайлу.
#Додамо функцію для розрахунку загальної тривалості плейліста,
#а потім використаємо це значення для визначення часу, коли слід запускати наступний процес.

#!/bin/bash

# Шлях до каталогу з відеофайлами
VIDEO_DIR="/home/admin30/Dropbox/Pharma/VideoStream"

# Функція для обчислення загальної тривалості відеофайлів у плейлісті
calculate_total_duration() {
  local total_duration=0
  for video_file in "${VIDEO_DIR}"/*.mp4; do
    if [[ -f "$video_file" ]]; then
      # Отримуємо тривалість файла у мілісекундах і додаємо до загальної тривалості
      local duration=$(mediainfo --Inform="General;%Duration%" "$video_file")
      total_duration=$((total_duration + duration))
    fi
  done
  echo $total_duration
}

# Функція для запуску VLC
run_vlc() {
  # Запускаємо VLC у повноекранному режимі без інтерфейсу та зберігаємо PID
  vlc --fullscreen --no-video-title-show --quiet "${VIDEO_DIR}"/*.mp4 &
  VLC_PID=$!

  # Зберігаємо PID у змінну
  echo $VLC_PID >/tmp/vlc_pid.txt
}

# Головний цикл
while true; do
  # Обчислюємо загальну тривалість плейліста
  TOTAL_DURATION=$(calculate_total_duration)

  # Запускаємо VLC
  run_vlc

  # Чекаємо на завершення програвання плейліста
  sleep $((TOTAL_DURATION / 1000))

  # Якщо VLC завершив роботу, зупиняємо попередній процес
  if [[ -f /tmp/vlc_pid.txt ]]; then
    kill $(cat /tmp/vlc_pid.txt)
    rm /tmp/vlc_pid.txt
  fi
done

#-----------------------------------
#!/bin/bash

# Шлях до каталогу з відеофайлами
VIDEO_DIR="/home/admin30/Dropbox/Pharma/VideoStream"

# Функція для запуску VLC
run_vlc() {
  # Запускаємо VLC у повноекранному режимі з відтворенням у циклі
  vlc --fullscreen --loop --no-video-title-show $(find "$VIDEO_DIR" -type f -name "*.mp4" -printf '%p ') &

  # Зберігаємо PID у змінну
  VLC_PID=$!
  echo $VLC_PID >/tmp/vlc_pid.txt

  # Чекаємо, поки wmctrl не знайде нове вікно VLC, та робимо його активним
  while true; do
    if wmctrl -lp | grep $VLC_PID; then
      wmctrl -i -a $(wmctrl -lp | grep $VLC_PID | cut -d " " -f 1)
      break
    fi
    sleep 1
  done
}

# Головний цикл
while true; do
  # Запускаємо VLC
  run_vlc

  # Чекаємо на зміни у каталозі або на завершення поточного відтворення
  inotifywait -e close_write,moved_to,create "${VIDEO_DIR}" || continue

  # Якщо VLC ще працює, зупиняємо попередній процес
  if [[ -f /tmp/vlc_pid.txt ]]; then
    kill $(cat /tmp/vlc_pid.txt)
    rm /tmp/vlc_pid.txt
  fi

  # Чекаємо трохи, щоб новий процес міг запуститися, перш ніж повторити цикл
  sleep 2
done
$()
#-----------------------------

#---------------------
#!/bin/bash

# Шлях до каталогу, який потрібно моніторити
WATCH_DIR="/path/to/your/directory"

# Безкінечний цикл для моніторингу каталогу
while true; do
  # Використання inotifywait для спостереження за видаленням файлів
  inotifywait -e delete "$WATCH_DIR"

  # Код, який виконується після виявлення видалення файлу
  echo "Файл видалено з $WATCH_DIR"
done

---
#!/bin/bash

# Шлях до каталогу, який потрібно моніторити
WATCH_DIR="/path/to/your/directory"

# Безкінечний цикл для моніторингу каталогу
while true; do
  # Використання inotifywait для спостереження за створенням файлів
  inotifywait -e create "$WATCH_DIR"

  # Код, який виконується після виявлення створення файлу
  echo "Файл додано до $WATCH_DIR"
done

#---------------------------------20.01.24---Алгоритм з маніпуляціями плейліста
#!/bin/bash

DIRECTORY="/home/admin30/Dropbox/Pharma/VideoStream"
SOCKET="/tmp/mpvsocket"

# Функція для відправлення команди до MPV через IPC
send_command_to_mpv() {
  echo $1 | socat - "$SOCKET"
}

# Моніторинг каталогу
inotifywait -m -e create -e delete "$DIRECTORY" --format '%f' | while read FILE; do
  if [[ $FILE == *.mp4 ]]; then
    # Додавання всіх mp4 файлів у каталогу до черги MPV
    for f in "$DIRECTORY"/*.mp4; do
      JSON_COMMAND='{"command": ["loadfile", "'$f'", "append"]}'
      send_command_to_mpv "$JSON_COMMAND"
    done

    # Затримка на 5 секунд
    sleep 5

    # Видалення first.mp4, second.mp4, third.mp4 з черги
    for f in first.mp4 second.mp4 third.mp4; do
      JSON_COMMAND='{"command": ["playlist-remove", "'$f'"]}'
      send_command_to_mpv "$JSON_COMMAND"
    done
  fi
done
#---

#!/bin/bash

# Каталог для моніторингу
WATCH_DIR="/home/admin30/Dropbox/Pharma/VideoStream"
# IPC сокет MPV
MPV_SOCKET="/tmp/mpvsocket"

# Функція для відправлення команд до MPV через IPC
send_command_to_mpv() {
  echo $1 | socat - UNIX-CONNECT:$MPV_SOCKET
}

# Функція для додавання файлів до черги MPV
add_files_to_playlist() {
  for file in "$WATCH_DIR"/*.mp4; do
    [[ -f "$file" ]] || continue
    send_command_to_mpv '{"command": ["loadfile", "'$file'", "append"]}'
  done
}

# Моніторинг каталогу на нові файли або видалення файлів
inotifywait -m -e create -e delete "$WATCH_DIR" --format '%f' | while read FILE; do
  if [[ "$FILE" == *.mp4 ]]; then
    # Додавання нових файлів до черги
    add_files_to_playlist

    # Чекаємо 5 секунд
    sleep 5

    # Видалення старих файлів з черги (за допомогою команди playlist-remove)
    # ...
    # Замість "..." потрібно ввести код для видалення старих файлів. Це може бути складно
    # реалізувати, оскільки потрібно точно знати, які файли видалити.
  fi
done
#----------------алго з тільки додавання файлів до плейліста
#!/bin/bash

# Каталог для моніторингу
WATCH_DIR="/home/admin30/Dropbox/Pharma/VideoStream"
# IPC сокет MPV
MPV_SOCKET="/tmp/mpvsocket"

# Функція для відправлення команд до MPV через IPC
send_command_to_mpv() {
  echo $1 | socat - UNIX-CONNECT:$MPV_SOCKET
}

# Функція для додавання всіх MP4 файлів з каталогу до черги MPV
add_files_to_playlist() {
  for file in "$WATCH_DIR"/*.mp4; do
    [[ -f "$file" ]] || continue
    send_command_to_mpv '{"command": ["loadfile", "'$file'", "append"]}'
  done
}

# Моніторинг каталогу на нові файли або видалення файлів
inotifywait -m -e create -e delete "$WATCH_DIR" --format '%f' | while read FILE; do
  if [[ "$FILE" == *.mp4 ]]; then
    # Додавання всіх MP4 файлів до черги MPV
    add_files_to_playlist
  fi
done
#---
#sudo apt-get install inotify-tools socat
#-------------------------------------

#!/bin/bash

# Каталог для моніторингу
WATCH_DIR="/home/admin30/Dropbox/Pharma/VideoStream"

# Скрипт, який потрібно перезапустити
SCRIPT_TO_RUN="/home/admin30/scripts/lvmpv.sh"

# Моніторинг каталогу на створення або видалення MP4 файлів
inotifywait -m -e create -e delete "$WATCH_DIR" --format '%f' | while read FILE
do
    if [[ "$FILE" == *.mp4 ]]; then
        echo "Зміни в каталозі виявлено. Перезапускаємо $SCRIPT_TO_RUN..."
        pkill -f $SCRIPT_TO_RUN
        bash $SCRIPT_TO_RUN &
    fi
done


#------------------------Алгоритм з перезапуском скрипта
#!/bin/bash

# Каталог для моніторингу
WATCH_DIR="/home/admin30/Dropbox/Pharma/VideoStream"

# Скрипт, який потрібно перезапустити
SCRIPT="/home/admin30/scripts/video_catalog_monitoring.sh"

# Моніторинг каталогу на створення або видалення MP4 файлів
inotifywait -m -e create -e delete "$WATCH_DIR" --format '%f' | while read FILE
do
    if [[ "$FILE" == *.mp4 ]]; then
        echo "Виявлено зміни у $WATCH_DIR. Перезапуск $SCRIPT..."

        # Знаходимо PID старого скрипта та процесу MPV
        OLD_SCRIPT_PID=$(pgrep -f "$SCRIPT")
        OLD_MPV_PID=$(pgrep -f "mpv")

        # Запускаємо новий скрипт
        bash "$SCRIPT" &

        # Завершуємо старі процеси
        [[ -n "$OLD_SCRIPT_PID" ]] && kill "$OLD_SCRIPT_PID"
        [[ -n "$OLD_MPV_PID" ]] && kill "$OLD_MPV_PID"
    fi
done

#---
#!/bin/bash

# Directory to monitor
WATCH_DIR="/home/admin30/Dropbox/Pharma/VideoStream"

# Script to restart
SCRIPT="/home/admin30/scripts/lvmpv.sh"

LOG_FILE="/home/admin30/Dropbox/Pharma/Logs/lvmpv.log"

log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

inotifywait -m -e create -e delete "$WATCH_DIR" --format '%f' | while read FILE
do
    if [[ "$FILE" == *.mp4 ]]; then
        log_message "Changes detected in $WATCH_DIR. Restarting $SCRIPT..."

        OLD_SCRIPT_PID=$(pgrep -f "$SCRIPT")
        OLD_MPV_PID=$(pgrep -f "mpv")

        bash "$SCRIPT" &
        log_message "New process $SCRIPT started."

        sleep 5

        if [[ -n "$OLD_SCRIPT_PID" ]]; then
            kill "$OLD_SCRIPT_PID"
            log_message "Terminated old process $SCRIPT with PID $OLD_SCRIPT_PID."
        fi

        if [[ -n "$OLD_MPV_PID" ]]; then
            kill "$OLD_MPV_PID"
            log_message "Terminated MPV process with PID $OLD_MPV_PID."
        fi
    fi
done


#---
#!/bin/bash

# Directory to monitor
WATCH_DIR="/home/admin30/Dropbox/Pharma/VideoStream"
# Log file
LOG_FILE="/path/to/your/logfile.log"

# Function to log messages with timestamp
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Function to start mpv
start_mpv() {
    mpv --mute=yes --fullscreen --no-osc "$WATCH_DIR"/*.mp4 &> /dev/null &
    MPV_PID=$!
    log_message "MPV started with PID $MPV_PID"
}

# Start mpv and log
start_mpv

# Monitor the directory
inotifywait -m -e create -e delete -e move -e moved_to -e moved_from "$WATCH_DIR" | while read event
do
    log_message "Change detected in directory: $event"
    if [ -n "$MPV_PID" ]; then
        kill "$MPV_PID"
        KILL_EXIT_CODE=$?
        log_message "Old MPV process (PID $MPV_PID) terminated with exit code $KILL_EXIT_CODE"
    fi
    start_mpv
done

